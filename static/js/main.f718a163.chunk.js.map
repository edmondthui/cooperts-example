{"version":3,"sources":["components/card/index.tsx","components/card-column/index.tsx","exo_modules/Resource/Types/index.ts","exo_modules/Resource/Decoders/index.ts","store/Decoders.ts","components/create-card/index.tsx","components/card-columns/index.tsx","store/index.ts","store/Types.ts","utils/kanban.utils.ts","store/Reaction.tsx","store/ReactionComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["handleDelete","store","cardId","e","preventDefault","delete","Task","fromPromise","db","deleteCardById","fork","err","console","log","success","observer","card","index","draggableId","id","provided","snapshot","className","draggableProps","dragHandleProps","ref","innerRef","style","isDragging","draggableStyle","transform","description","onClick","cards","status","droppableId","droppableProps","map","key","placeholder","rels","toRel","value","toResult","find","rel","resourceDecoder","resourceR","payloadR","linksDecoderR","resourceDecoderR","validationErrorDecoder","resourceWithErrorsDecoderR","resourceWithMetadataDecoderR","succeed","assign","field","stringLiteral","string","array","fromDecoderAny","decoder","reject","resolve","decodeAny","cata","Ok","Err","noop","cardTypeDecoder","oneOf","cardDecoder","number","cardArrayDecoder","decodeCards","mapError","idDecoder","customStyles","content","top","left","right","bottom","marginRight","width","height","boxShadow","display","justifyContent","Modal","setAppElement","onStringChange","setCreateString","target","openModal","createString","trim","length","toggleModal","closeModal","handleSubmit","name","getOrElseValue","addCard","succ","newCard","Object","created","Date","now","lastUpdated","statusHandler","setStatus","CreateCard","this","props","isOpen","modalOpen","onRequestClose","contentLabel","onSubmit","onChange","disabled","maxLength","React","Component","getCards","column","Array","from","todo","inProgress","done","setCards","setTodo","setInProgress","setDone","onDragEnd","result","destination","source","splice","destinationCards","updateCardById","assertNever","x","Error","Store","state","kind","just","nothing","open","message","observable","action","previous","undefined","loading","data","ready","flat","filter","computed","connectToKanbanDB","KanbanDB","connect","obj","Reactions","tester","effect","load","do","andThen","comparer","default","running","fireImmediately","delay","debounceDelay","equals","run","reaction","options","App","Reaction","Boolean","window","location","hostname","match","ReactDOM","createRoot","document","getElementById","render","navigator","serviceWorker","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f718a163.chunk.js","sourcesContent":["import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport Task from \"taskarian\";\nimport Store from \"../../store\";\nimport \"./card.styles.css\";\n\ninterface Props {\n  card: any;\n  index: number;\n  store: Store;\n}\n\nconst getCardStyle = (isDragging: any, draggableStyle: any) => {\n  if (isDragging && draggableStyle.transform !== null)\n    draggableStyle.transform += \" rotate(3deg)\";\n  return { ...draggableStyle };\n};\n\nconst handleDelete =\n  (store: Store, cardId: string) =>\n  (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    store.delete(cardId);\n    Task.fromPromise(() => store.db.deleteCardById(cardId)).fork(\n      (err) => console.log(err),\n      (success) => console.log(success)\n    );\n  };\n\nconst Card: React.FC<Props> = ({ card, index, store }) => (\n  <Draggable draggableId={card.id} index={index}>\n    {(provided, snapshot) => (\n      <div\n        className=\"card\"\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        ref={provided.innerRef}\n        id={card.id}\n        style={getCardStyle(snapshot.isDragging, provided.draggableProps.style)}\n      >\n        {card.description}\n        <button onClick={handleDelete(store, card.id)} className=\"delete\">\n          &#10005;\n        </button>\n      </div>\n    )}\n  </Draggable>\n);\n\nexport default observer(Card);\n","import * as React from \"react\";\nimport \"./card-column.styles.css\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport Card from \"../card\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../store\";\n\ninterface Props {\n  cards: Array<any>;\n  status: string;\n  store: Store\n}\n\nconst CardColumn: React.FC<Props> = ({ cards, status, store }) => (\n  <Droppable droppableId={status}>\n    {(provided) => (\n      <div\n        ref={provided.innerRef}\n        className=\"card-column\"\n        {...provided.droppableProps}\n      >\n        {cards.map((card, index) => {\n          return <Card card={card} index={index} key={card.id} store={store} />;\n        })}\n        {provided.placeholder}\n      </div>\n    )}\n  </Droppable>\n);\n\nexport default observer(CardColumn);\n","import { find } from \"@execonline-inc/collections\";\nimport { toResult } from \"@execonline-inc/maybe-adapter\";\nimport {\n  Link as LinkR,\n  Linkable as LinkableR,\n  payload as payloadR,\n  PossiblyLinkable as PossiblyLinkableR,\n  Resource as ResourceR,\n  resource as resourceR,\n  ResourceWithErrors as ResourceWithErrorsR,\n  ResourceWithMetadata as ResourceWithMetadataR,\n} from \"@execonline-inc/resource\";\nimport { Maybe } from \"maybeasy\";\nimport { Result } from \"resulty\";\n\nconst rels = [\n  \"add-complete\",\n  \"add-current\",\n  \"add-progress-detail\",\n  \"ancestor\",\n  \"ancestor-1\",\n  \"announcements\",\n  \"asset\",\n  \"assignments\",\n  \"attachment\",\n  \"asset-usages\",\n  \"bluejeans\",\n  \"bulk-update-team-message\",\n  \"catalog-listings\",\n  \"coaching-products\",\n  \"communications\",\n  \"communications-template\",\n  \"copy\",\n  \"copy-form\",\n  \"conference-room\",\n  \"create\",\n  \"create-form\",\n  \"deactivate\",\n  \"delete\",\n  \"destroy\",\n  \"download\",\n  \"example-metadata\",\n  \"example-translation\",\n  \"edit\",\n  \"edit-content\",\n  \"edit-form\",\n  \"edit-publish-settings\",\n  \"edit-schedule\",\n  \"engagement\",\n  \"engagement-activities\",\n  \"files\",\n  \"history\",\n  \"impersonate\",\n  \"import\",\n  \"import-errors\",\n  \"import-items\",\n  \"import-translations\",\n  \"index\",\n  \"last-published-by\",\n  \"logs\",\n  \"meta\",\n  \"new\",\n  \"next\",\n  \"options\",\n  \"organization-template\",\n  \"origin-program\",\n  \"override-template\",\n  \"page-template\",\n  \"parent\",\n  \"parent-program\",\n  \"preview\",\n  \"previous\",\n  \"products\",\n  \"program-families\",\n  \"programs\",\n  \"progress\",\n  \"publish\",\n  \"reactivate\",\n  \"recipients-template\",\n  \"recommendation-engines\",\n  \"registrants\",\n  \"remove\",\n  \"remove-communication\",\n  \"remove-complete\",\n  \"salesforce\",\n  \"scopeable\",\n  \"self\",\n  \"share-urls\",\n  \"shareFile\",\n  \"shared-open-enrollment\",\n  \"shared-open-enrollment-short-link\",\n  \"thumb\",\n  \"update\",\n  \"update-override-template\",\n  \"use-case\",\n  \"use-case-registrant-options-template\",\n  \"use-case-registrant-template\",\n  \"use-case-roster\",\n  \"user\",\n  \"view\",\n  \"view-all\",\n  \"visualization-token\",\n] as const;\n\nexport type Rel = typeof rels[number];\n\nexport const toRel = (value: string): Result<string, Rel> =>\n  toResult(\n    `Expected to find an HTTP rel string. Instead I found ${value}`,\n    find((rel) => rel === value, rels)\n  );\n\nexport type Link = LinkR<Rel>;\nexport type Linkable = LinkableR<Rel>;\nexport type PossiblyLinkable = PossiblyLinkableR<Rel>;\n\nexport type Resource<T> = ResourceR<T, Rel>;\nexport type ResourceWithErrors<T> = ResourceWithErrorsR<T, Rel>;\nexport type ResourceWithMetadata<T, M> = ResourceWithMetadataR<T, M, Rel>;\nexport type ResourceWithActions<T, A> = Resource<T> & { actions: A };\n\nexport const resource: <T>(\n  links: ReadonlyArray<Link>,\n  payload: T\n) => Resource<T> = resourceR;\n\nexport const payload: <A, R extends Resource<A>>(r: R) => A = payloadR;\n\n// TODO: which of this need to stay, and which are in the lib now?\nexport const hasUrl =\n  <T>(url: string, rel: Rel) =>\n  (r: Resource<T>): boolean => {\n    return r.links.reduce<boolean>(\n      (found, l) => (found ? found : l.href === url && l.rel === rel),\n      false\n    );\n  };\n\nexport type ValidationErrors = ValidationError[];\n\nexport interface ValidationError {\n  kind: \"validation-error\";\n  title: \"Invalid Attribute\";\n  resource: string;\n  attributePath: string;\n  attribute: string;\n  detail: string;\n  error: string;\n}\n\nexport type Embedded<T> = {\n  [K in Rel & keyof T]: Maybe<Resource<T[K]>>;\n};\n\nexport type ResourceWithEmbedded<T, E> = Resource<T> & {\n  embedded: Embedded<E>;\n};\n","import { stringLiteral } from \"@execonline-inc/decoders\";\nimport {\n  linksDecoder as linksDecoderR,\n  resourceDecoder as resourceDecoderR,\n  ResourceWithErrors,\n  resourceWithErrorsDecoder as resourceWithErrorsDecoderR,\n  ResourceWithMetadata,\n  resourceWithMetadataDecoder as resourceWithMetadataDecoderR,\n} from \"@execonline-inc/resource\";\nimport Decoder, {\n  array,\n  boolean,\n  field,\n  maybe,\n  string,\n  succeed,\n} from \"jsonous\";\nimport { Maybe } from \"maybeasy\";\nimport {\n  Embedded,\n  Rel,\n  Resource,\n  ResourceWithActions,\n  ResourceWithEmbedded,\n  toRel,\n  ValidationError,\n  ValidationErrors,\n} from \"../Types\";\n\nexport const linksDecoder = linksDecoderR(toRel);\n\nexport const resourceDecoder: <T>(\n  payloadDecoder: Decoder<T>\n) => Decoder<Resource<T>> = resourceDecoderR(toRel);\n\nexport const resourceWithErrorsDecoder: <T>(\n  payloadDecoder: Decoder<T>\n) => Decoder<ResourceWithErrors<T, Rel>> = resourceWithErrorsDecoderR(toRel);\n\nexport const resourceWithMetadataDecoder: <T, M>(\n  payloadDecoder: Decoder<T>,\n  metadataDecoder: Decoder<M>\n) => Decoder<ResourceWithMetadata<T, M, Rel>> =\n  resourceWithMetadataDecoderR(toRel);\n\nexport const resourceWithActionsDecoder = <T, A>(\n  payloadDecoder: Decoder<T>,\n  actionsDecoder: Decoder<A>\n): Decoder<ResourceWithActions<T, A>> =>\n  succeed({})\n    .assign(\"links\", field(\"links\", linksDecoder))\n    .assign(\"payload\", field(\"data\", payloadDecoder))\n    .assign(\"actions\", field(\"actions\", actionsDecoder));\n\nexport const embeddedResourceDecoder = <T>(\n  rel: Rel,\n  decoder: Decoder<T>\n): Decoder<Maybe<Resource<T>>> => maybe(field(rel, resourceDecoder(decoder)));\n\nexport const resourceWithEmbeddedDecoder = <T, E>(\n  payloadDecoder: Decoder<T>,\n  embeddedDecoder: Decoder<Embedded<E>>\n): Decoder<ResourceWithEmbedded<T, E>> =>\n  resourceDecoder(payloadDecoder).assign(\n    \"embedded\",\n    field(\"embedded\", embeddedDecoder)\n  );\n\nexport { errorDecoder } from \"@execonline-inc/resource\";\n\nexport const validationErrorDecoder: Decoder<ValidationError> = succeed({})\n  .assign(\"kind\", field(\"kind\", stringLiteral(\"validation-error\")))\n  .assign(\"title\", field(\"title\", stringLiteral(\"Invalid Attribute\")))\n  .assign(\"resource\", field(\"resource\", string))\n  .assign(\"attributePath\", field(\"attribute_path\", string))\n  .assign(\"attribute\", field(\"attribute\", string))\n  .assign(\"detail\", field(\"detail\", string))\n  .assign(\"error\", field(\"error\", string));\n\nexport const validationErrorsDecoder: Decoder<ValidationErrors> = array(\n  validationErrorDecoder\n);\n\nexport const optionalBooleanDecoder = (fieldName: string) =>\n  maybe(field(fieldName, boolean)).map((id) => id.getOrElseValue(false));\n","import { resourceDecoder } from \"../exo_modules/Resource/Decoders\";\nimport Decoder, { array, field, oneOf, string, succeed, number } from \"jsonous\";\nimport { Card, CardResource, CardType } from \"./Types\";\nimport { stringLiteral } from \"@execonline-inc/decoders\";\nimport Task from \"taskarian\";\nimport { noop } from \"@kofno/piper\";\n\nexport const fromDecoderAny =\n  <T>(decoder: Decoder<T>) =>\n  (value: unknown): Task<string, T> =>\n    new Task((reject, resolve) => {\n      decoder.decodeAny(value).cata({ Ok: resolve, Err: reject });\n      return noop;\n    });\n\nexport const cardTypeDecoder: Decoder<CardType> = oneOf<CardType>([\n  stringLiteral<CardType>(\"TODO\"),\n  stringLiteral<CardType>(\"DONE\"),\n  stringLiteral<CardType>(\"IN_PROGRESS\"),\n]);\n\nexport const cardDecoder: Decoder<Card> = succeed({})\n  .assign(\"id\", field(\"id\", string))\n  .assign(\"name\", field(\"name\", string))\n  .assign(\"description\", field(\"description\", string))\n  .assign(\"status\", field(\"status\", cardTypeDecoder))\n  .assign(\"created\", field(\"created\", number))\n  .assign(\"lastUpdated\", field(\"lastUpdated\", number));\n\nexport const anyCardDecoder = fromDecoderAny(cardDecoder);\n\nexport const cardResourceDecoder: Decoder<CardResource> =\n  resourceDecoder(cardDecoder);\n\nexport const cardArrayDecoder: Decoder<Card[]> = array(cardDecoder);\n\nexport const decodeCards = (cards: unknown) =>\n  fromDecoderAny(cardArrayDecoder)(cards).mapError((e) => ({\n    err: `decoder error ${e}`,\n  }));\n\nexport const idDecoder: Decoder<string> = string;\n\nexport const decodeId = (id: unknown) =>\n  fromDecoderAny(idDecoder)(id).mapError((e) => ({\n    err: `decoder error ${e}`,\n  }));\n","import { Maybe } from \"maybeasy\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport Modal from \"react-modal\";\nimport Task from \"taskarian\";\nimport Store from \"../../store\";\nimport \"./create-card.styles.css\";\nimport { decodeId } from \"../../store/Decoders\";\nimport { CardType } from \"../../store/Types\";\n\ninterface Props {\n  store: Store;\n  createString: Maybe<string>;\n}\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: \"50%\",\n    height: \"25%\",\n    boxShadow: \"0px 2px 5px 5px rgba(0, 0, 0, 0.1)\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n};\n\nModal.setAppElement(\"#root\");\n\nconst onStringChange =\n  (store: Store) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    store.setCreateString(e.target.value);\n  };\n\nconst openModal = (store: Store, createString: string) => (e: any) => {\n  e.preventDefault();\n  if (createString.trim().length) {\n    store.toggleModal(true);\n  }\n};\n\nconst closeModal = (store: Store) => (e: any) => {\n  store.toggleModal(false);\n};\n\nconst handleSubmit =\n  (store: Store) => (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    let card = {\n      name: store.createString.getOrElseValue(\"\"),\n      description: store.createString.getOrElseValue(\"\"),\n      status: store.status,\n    };\n    if (card.status.length > 0) {\n      Task.fromPromise(() => store.db.addCard(card)).fork(\n        (err) => console.log(err),\n        (success) => {\n          decodeId(success).fork(\n            () => {},\n            (succ) => {\n              const newCard = Object.assign(\n                { id: succ, created: Date.now(), lastUpdated: Date.now() },\n                card\n              );\n              store.addCard(newCard);\n            }\n          );\n        }\n      );\n    } else {\n      // store.error({ message: \"Card status required!\" });\n    }\n  };\n\nconst statusHandler =\n  (store: Store) => (e: React.ChangeEvent<HTMLSelectElement>) => {\n    store.setStatus(e.target.value as CardType);\n  };\n\nclass CreateCard extends React.Component<Props> {\n  render() {\n    const store = this.props.store;\n    return (\n      <div className=\"create-card\">\n        <Modal\n          isOpen={store.modalOpen}\n          onRequestClose={closeModal(store)}\n          style={customStyles}\n          contentLabel=\"Create Card Modal\"\n        >\n          <form onSubmit={handleSubmit(store)} className=\"modal-form\">\n            <select onChange={statusHandler(store)} value={store.status}>\n              <option value=\"\" disabled>\n                SELECT STATUS\n              </option>\n              <option value=\"TODO\">To-do</option>\n              <option value=\"IN_PROGRESS\">In Progress</option>\n              <option value=\"DONE\">Done</option>\n            </select>\n            <button>CREATE CARD</button>\n          </form>\n        </Modal>\n        <form\n          onSubmit={openModal(store, store.createString.getOrElseValue(\"\"))}\n          className=\"create-card-form\"\n        >\n          <input\n            onChange={onStringChange(store)}\n            value={this.props.createString.getOrElseValue(\"\")}\n            placeholder=\"e.g. Bug: TextPoll not dispatching half stars\"\n            maxLength={500}\n          />\n          <button>ADD NEW</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default observer(CreateCard);\n","import React from \"react\";\nimport \"./card-columns.styles.css\";\nimport { observer } from \"mobx-react\";\nimport { Maybe } from \"maybeasy\";\nimport CardColumn from \"../card-column\";\nimport CreateCard from \"../create-card\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport Store from \"../../store\";\nimport Task from \"taskarian\";\n\ninterface Props {\n  store: Store;\n  createString: Maybe<string>;\n}\n\nconst getCards = (column: string, store: Store): Array<any> => {\n  switch (column) {\n    case \"TODO\":\n      return Array.from(store.todo);\n    case \"IN_PROGRESS\":\n      return Array.from(store.inProgress);\n    case \"DONE\":\n      return Array.from(store.done);\n    default:\n      return [];\n  }\n};\n\nconst setCards = (column: string, cards: Array<any>, store: Store) => {\n  switch (column) {\n    case \"TODO\":\n      return store.setTodo(cards);\n    case \"IN_PROGRESS\":\n      return store.setInProgress(cards);\n    case \"DONE\":\n      return store.setDone(cards);\n  }\n};\n\nconst onDragEnd = (store: Store) => (result: any) => {\n  const { destination, source } = result;\n  if (!destination) {\n    return;\n  }\n  if (\n    destination.droppableId === source.droppableId &&\n    destination.index === source.index\n  ) {\n    return;\n  }\n\n  const column = source.droppableId;\n  let cards = getCards(column, store);\n\n  if (destination.droppableId === source.droppableId) {\n    // // Database does not keep track of index so it just updates this on the front end\n    const card = cards.splice(source.index, 1);\n    cards.splice(destination.index, 0, ...card);\n    setCards(column, cards, store);\n  }\n\n  if (destination.droppableId !== source.droppableId) {\n    const card = cards[source.index];\n    card.status = destination.droppableId;\n    cards.splice(source.index, 1);\n    const destinationCards = getCards(destination.droppableId, store);\n    destinationCards.splice(destination.index, 0, card);\n    setCards(destination.droppableId, destinationCards, store);\n    setCards(column, cards, store);\n    Task.fromPromise(() =>\n      store.db.updateCardById(card.id, { status: destination.droppableId })\n    ).fork(\n      (err) => console.log(err),\n      (success) => console.log(success)\n    );\n  }\n};\n\nconst CardColumns: React.FC<Props> = ({ store, createString }) => {\n  return (\n    <div className=\"App\">\n      <div className=\"columns-container\">\n        <DragDropContext onDragEnd={onDragEnd(store)}>\n          <div className=\"column-container\">\n            <h1 className=\"column-title\">To-do</h1>\n            <CardColumn cards={store.todo} status=\"TODO\" store={store} />\n          </div>\n          <div className=\"column-container\">\n            <h1 className=\"column-title\">In Progress</h1>\n            <CardColumn\n              cards={store.inProgress}\n              status=\"IN_PROGRESS\"\n              store={store}\n            />\n          </div>\n          <div className=\"column-container\">\n            <h1 className=\"column-title\">Done</h1>\n            <CardColumn cards={store.done} status=\"DONE\" store={store} />\n          </div>\n          <CreateCard store={store} createString={createString} />\n        </DragDropContext>\n      </div>\n    </div>\n  );\n};\n\nexport default observer(CardColumns);\n","import { action, computed, observable } from \"mobx\";\nimport { just, Maybe, nothing } from \"maybeasy\";\nimport { Card, CardType, error, loading, ready, State, waiting } from \"./Types\";\n\nexport const assertNever = (x: never) => {\n  throw new Error(`Unexpected object: ${x}`);\n};\n\nclass Store {\n  @observable\n  state: State = waiting();\n\n  @action\n  load = () => {\n    switch (this.state.kind) {\n      case \"waiting\":\n        this.state = loading(this.state);\n        break;\n      case \"ready\":\n      case \"loading\":\n      case \"error\":\n        break;\n      default:\n        assertNever(this.state);\n    }\n  };\n\n  @action\n  ready = (data: any) => {\n    switch (this.state.kind) {\n      case \"ready\":\n      case \"error\":\n      case \"waiting\":\n        break;\n      case \"loading\":\n        this.state.db = data.db;\n        this.state = ready(this.state);\n        break;\n      default:\n        assertNever(this.state);\n    }\n  };\n\n  @action\n  error = (err: any) => {\n    this.state = error(\n      `Request failed due to '${err.kind}'. Please try again later.`\n    );\n  };\n\n  @action\n  setCreateString = (string: string) => {\n    switch (this.state.kind) {\n      case \"ready\":\n        this.state.createString = string;\n        break;\n      case \"error\":\n      case \"waiting\":\n      case \"loading\":\n        break;\n      default:\n        assertNever(this.state);\n    }\n  };\n\n  @action\n  toggleModal = (isOpen: boolean) => {\n    switch (this.state.kind) {\n      case \"ready\":\n        this.state.open = isOpen;\n        break;\n      case \"error\":\n      case \"waiting\":\n      case \"loading\":\n        break;\n      default:\n        assertNever(this.state);\n    }\n  };\n\n  @action\n  setStatus = (status: CardType) => {\n    switch (this.state.kind) {\n      case \"ready\":\n        this.state.status = status;\n        break;\n      case \"error\":\n      case \"waiting\":\n      case \"loading\":\n        break;\n      default:\n        assertNever(this.state);\n    }\n  };\n\n  @action\n  addCard = (card: Card) => {\n    switch (this.state.kind) {\n      case \"ready\":\n        switch (card.status) {\n          case \"TODO\":\n            this.state.todo = [...this.state.todo, card].flat();\n            break;\n          case \"IN_PROGRESS\":\n            this.state.inProgress = [...this.state.inProgress, card].flat();\n            break;\n          case \"DONE\":\n            this.state.done = [...this.state.done, card].flat();\n            break;\n        }\n        this.state.open = false;\n        this.state.createString = \"\";\n        this.state.status = \"\";\n        break;\n      case \"error\":\n      case \"waiting\":\n      case \"loading\":\n        break;\n      default:\n        assertNever(this.state);\n    }\n  };\n\n  @action\n  setTodo = (cards: Array<Card>) => {\n    switch (this.state.kind) {\n      case \"ready\":\n        this.state.todo = cards;\n        break;\n      case \"error\":\n      case \"waiting\":\n      case \"loading\":\n        break;\n      default:\n        assertNever(this.state);\n    }\n  };\n\n  @action\n  setInProgress = (cards: Array<Card>) => {\n    switch (this.state.kind) {\n      case \"ready\":\n        this.state.inProgress = cards;\n        break;\n      case \"error\":\n      case \"waiting\":\n      case \"loading\":\n        break;\n      default:\n        assertNever(this.state);\n    }\n  };\n\n  @action\n  setDone = (cards: Array<Card>) => {\n    switch (this.state.kind) {\n      case \"ready\":\n        this.state.done = cards;\n        break;\n      case \"error\":\n      case \"waiting\":\n      case \"loading\":\n        break;\n      default:\n        assertNever(this.state);\n    }\n  };\n\n  @action\n  setCards = (cards: Array<Card>) => {\n    switch (this.state.kind) {\n      case \"ready\":\n        this.state.todo = cards.filter((card: Card) => card.status === \"TODO\");\n        this.state.inProgress = cards.filter(\n          (card: Card) => card.status === \"IN_PROGRESS\"\n        );\n        this.state.done = cards.filter((card: Card) => card.status === \"DONE\");\n        this.state.open = false;\n        this.state.createString = \"\";\n        break;\n      case \"error\":\n      case \"waiting\":\n      case \"loading\":\n        break;\n      default:\n        assertNever(this.state);\n    }\n  };\n\n  @action\n  delete = (cardId: string) => {\n    switch (this.state.kind) {\n      case \"ready\":\n        this.state.todo = this.state.todo.filter(\n          (card: Card) => card.id !== cardId\n        );\n        this.state.inProgress = this.state.inProgress.filter(\n          (card: Card) => card.id !== cardId\n        );\n        this.state.done = this.state.done.filter(\n          (card: Card) => card.id !== cardId\n        );\n        break;\n      case \"error\":\n      case \"waiting\":\n      case \"loading\":\n        break;\n      default:\n        assertNever(this.state);\n    }\n  };\n\n  @computed\n  get createString(): Maybe<string> {\n    switch (this.state.kind) {\n      case \"ready\":\n      case \"loading\":\n        return just(this.state.createString);\n      case \"waiting\":\n      case \"error\":\n      default:\n        return nothing();\n    }\n  }\n\n  @computed\n  get status(): CardType {\n    switch (this.state.kind) {\n      case \"ready\":\n      case \"loading\":\n        return this.state.status;\n      case \"waiting\":\n      case \"error\":\n      default:\n        return \"\";\n    }\n  }\n\n  @computed\n  get modalOpen(): boolean {\n    switch (this.state.kind) {\n      case \"ready\":\n      case \"loading\":\n        return this.state.open;\n      case \"waiting\":\n      case \"error\":\n      default:\n        return false;\n    }\n  }\n\n  @computed\n  get errorMessage(): Maybe<string> {\n    switch (this.state.kind) {\n      case \"error\":\n        return just(this.state.message);\n      case \"ready\":\n      case \"loading\":\n      case \"waiting\":\n      default:\n        return nothing();\n    }\n  }\n\n  @computed\n  get todo(): Array<Card> {\n    switch (this.state.kind) {\n      case \"ready\":\n        return this.state.todo;\n      case \"error\":\n      case \"loading\":\n      case \"waiting\":\n      default:\n        return [];\n    }\n  }\n\n  @computed\n  get inProgress(): Array<Card> {\n    switch (this.state.kind) {\n      case \"ready\":\n        return this.state.inProgress;\n      case \"error\":\n      case \"loading\":\n      case \"waiting\":\n      default:\n        return [];\n    }\n  }\n\n  @computed\n  get done(): Array<Card> {\n    switch (this.state.kind) {\n      case \"ready\":\n        return this.state.done;\n      case \"error\":\n      case \"loading\":\n      case \"waiting\":\n      default:\n        return [];\n    }\n  }\n\n  @computed\n  get db(): any {\n    switch (this.state.kind) {\n      case \"ready\":\n        return this.state.db;\n      case \"loading\":\n      case \"waiting\":\n      case \"error\":\n      default:\n        return false;\n    }\n  }\n}\n\nexport default Store;\n","import { Resource } from \"../exo_modules/Resource/Types/index\";\n\nexport interface Card {\n  id: string;\n  name: string;\n  description: string;\n  status: CardType;\n  created: number; // UNIX timestamp\n  lastUpdated: number; // UNIX timestamp\n}\n\nexport type CardResource = Resource<Card>;\n\nexport type CardType = \"TODO\" | \"DONE\" | \"IN_PROGRESS\" | \"\";\n\nexport const waiting = (): Waiting => ({\n  kind: \"waiting\",\n});\n\nexport const loading = (state: Waiting | Ready | Loading): Loading => {\n  const { kind, ...previous } = state;\n  return {\n    kind: \"loading\",\n    ...previous,\n    createString: \"\",\n    open: false,\n    status: \"\",\n    todo: [],\n    inProgress: [],\n    done: [],\n    db: undefined,\n  };\n};\n\nexport const ready = (state: Loading | Ready): Ready => {\n  const { kind, ...previous } = state;\n  return {\n    kind: \"ready\",\n    ...previous,\n  };\n};\n\nexport const error = (message: string): Error => ({\n  kind: \"error\",\n  message,\n});\n\ninterface Waiting {\n  kind: \"waiting\";\n}\n\nexport interface Loading {\n  kind: \"loading\";\n  createString: string;\n  todo: Array<any>;\n  inProgress: Array<any>;\n  done: Array<any>;\n  db: any;\n  open: boolean;\n  status: CardType;\n}\n\ninterface Ready {\n  kind: \"ready\";\n  todo: Array<any>;\n  inProgress: Array<any>;\n  done: Array<any>;\n  db: any;\n  createString: string;\n  open: boolean;\n  status: CardType;\n}\n\ninterface Error {\n  kind: \"error\";\n  message: string;\n}\n\nexport type State = Waiting | Loading | Ready | Error;\n","import KanbanDB from \"kanbandb\";\nimport Task from \"taskarian\";\n\nexport const connectToKanbanDB = () => {\n  return Task.fromPromise(() => KanbanDB.connect(\"testDB\"));\n};\n\nexport const getCards = (obj: any) => {\n  return Task.fromPromise(() => obj.db.getCards());\n};\n","import { observer } from \"mobx-react\";\nimport Task from \"taskarian\";\nimport { connectToKanbanDB, getCards } from \"../utils/kanban.utils\";\nimport Store, { assertNever } from \"./index\";\nimport ReactionComponent, { RCProps } from \"./ReactionComponent\";\nimport { State } from \"./Types\";\nimport { decodeCards } from \"./Decoders\";\n\ninterface Props extends RCProps<Store> {\n  store: Store;\n}\n\nclass Reactions extends ReactionComponent<Store, State, Props> {\n  tester = () => this.props.store.state;\n  effect = (state: State) => {\n    const { store } = this.props;\n    switch (state.kind) {\n      case \"waiting\":\n        store.load();\n        break;\n      case \"loading\":\n        Task.succeed<any, {}>({})\n          .assign(\"db\", connectToKanbanDB)\n          .do(store.ready)\n          .andThen(getCards)\n          .andThen(decodeCards)\n          .do(store.setCards)\n          .fork(\n            (err) => console.log(err),\n            (success) => console.log(success)\n          );\n        break;\n      case \"ready\":\n      case \"error\":\n        break;\n      default:\n        assertNever(state);\n    }\n  };\n}\n\nexport default observer(Reactions);\n","import { comparer, IReactionDisposer, IReactionOptions, IReactionPublic, reaction } from 'mobx';\nimport * as React from 'react';\n\nexport interface ReactState {}\n\nexport interface RCProps<Store> {\n  store: Store;\n  fireImmediately?: boolean;\n  debounceDelay?: number;\n}\n\nexport type ReactionComparer<ObservedState> = (\n  prev: ObservedState,\n  current: ObservedState\n) => boolean;\n\nabstract class ReactionComponent<\n  Store,\n  ObservedState,\n  P extends RCProps<Store>\n> extends React.Component<P, ReactState> {\n  protected abstract tester: (r?: IReactionPublic) => ObservedState;\n  protected abstract effect: (arg: ObservedState, r?: IReactionPublic) => void;\n\n  /**\n   * Provides logic that determines if the watched value has changed. The default behavior\n   * is to use mobx's default compare, which is a slighty enhanced identity compare.\n   */\n  protected comparer: ReactionComparer<ObservedState> = comparer.default;\n\n  private running?: IReactionDisposer;\n\n  private get options(): IReactionOptions | undefined {\n    return {\n      fireImmediately: this.props.fireImmediately,\n      delay: this.props.debounceDelay,\n      equals: this.comparer,\n    };\n  }\n\n  constructor(props: P) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.running = this.run();\n  }\n\n  componentWillUnmount() {\n    if (this.running) {\n      this.running();\n    }\n  }\n\n  render() {\n    return <></>;\n  }\n\n  private run(): IReactionDisposer {\n    return reaction(this.tester, this.effect, this.options);\n  }\n}\n\nexport default ReactionComponent;\n","import { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport \"./App.css\";\nimport CardColumns from \"./components/card-columns\";\nimport Store from \"./store\";\nimport Reactions from \"./store/Reaction\";\n\ninterface Props {}\n\nclass App extends React.Component<Props> {\n  store = new Store();\n\n  render() {\n    return (\n      <>\n        <CardColumns\n          store={this.store}\n          createString={this.store.createString}\n        />\n        <Reactions store={this.store} fireImmediately={true} />\n      </>\n    );\n  }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string | URL, config: { onUpdate: (arg0: ServiceWorkerRegistration) => void; onSuccess: (arg0: ServiceWorkerRegistration) => void; }) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string | URL, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\n\nroot.render(<App />);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}